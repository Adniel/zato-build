---

# Let's check first if the deb package isn't already in the local repo,
# and only then add it.
- name: Get list of packages in the local repository
  shell: aptly repo search \
         zato-{{ package_version }}-{{ codename }} zato
  register: package_list
  ignore_errors: True

- name: Add the package to aptly repository
  shell: aptly repo add zato-{{ package_version }}-{{ codename }} \
         /opt/aptly/incoming/{{ distribution }}/{{ codename }}/zato-{{ release_version }}-{{ package_version }}_{{ architecture }}-{{ codename }}.{{ format }}
  when:
      "'zato_{{ release_version }}-{{ package_version }}-{{ codename }}_{{ architecture }}' not in package_list.stdout"
  register: package_added

- name: Create a snapshot of the repository
  shell: aptly snapshot create \
    snap-zato-{{ package_version }}-{{ codename }}-{{ repo_datetime }} \
    from repo zato-{{ package_version }}-{{ codename }}
  when: package_added.changed == True
  register: snapshot_created

# Check if there is any previous repo
# on this host; this is in case this
# playbook is being run for the first time
# on a host
- name: Get a list of published repos
  shell: aptly publish list
  register: repo_list

- name: Drop the previous published repo (if it exists)
  shell: aptly publish drop {{ codename }} \
    repo/{{ package_version }}/2.0/{{ distribution }}
  when:
    "'repo/{{ package_version }}/2.0/{{ distribution }}/{{ codename }}' in repo_list.stdout"

- name: Publish the snapshot
  shell: aptly publish snapshot \
      snap-zato-{{ package_version }}-{{ codename }}-{{ repo_datetime }} \
    repo/{{ package_version }}/2.0/{{ distribution }}
  register: snapshot_published
  when: snapshot_created.changed == True

- name: Copy published repo to /var/www/repo directory
  shell: cp -r /opt/aptly/.aptly/public/repo/{{ package_version }}/2.0/{{ distribution }} \
      /var/www/repo/{{ package_version }}/2.0/
  become_user: root
  when: snapshot_published.changed == True
