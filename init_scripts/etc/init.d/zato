#!/bin/bash
# INIT script to manage start/stop Zato components

### BEGIN INIT INFO
# Provides:          zato
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Starts and stops Zato components
# Description:
### END INIT INFO


ENV=/etc/zato/components-enabled

component_all()
{
for link in $ENV/*
  do 
    component=`readlink $link`
    if [[ $component != "" ]]; then
	x=${link#"$ENV/"}
	if [[ $1 == "start" ]]; then 
	    echo "Starting $x from $component..."
	    if [ -f "$component/pidfile" ]; then
	     pid=`cat $component/pidfile`
	     pidstatus=`ps -ef|grep $pid |grep "[z]ato"`
	     if [ -z "$pidstatus" ]; then
	      rm -f $component/pidfile
	      if [ -f "$component/zato-lb-agent.pid" ]; then
	       rm -f $component/zato-lb-agent.pid
	      fi
	     fi
	    fi
	    su - zato -c "zato $1 $component"
	fi
	if [[ $1 == "stop" ]]; then 
	    su - zato -c "zato $1 $component"
	fi
	if [[ $1 == "info" ]]; then 
	    status=`su - zato -c "zato $1 $component | grep component_running | sed 's/|//g' | sed 's/component_running//' | sed 's/ //g'"`
	    if [[ $status == "True" ]]; then
	     echo "Component $x ($component) running"
	    elif [[ $status == "False" ]]; then
	     echo "Component $x ($component) not running"
	    else
	     echo "Component $x ($component) failed"
	    fi
	fi
    fi
done
}

case "$1" in
  start)
    echo "Starting Zato components..."
    component_all start
    ;;
  restart)
    component_all stop
    component_all start
    ;;
  stop)
    echo "Stopping Zato components..."
    component_all stop
    ;;
  status)
    echo "Status Zato components..."
    component_all info
    ;;
  *)
    echo "Usage: $0 {start, stop, restart, status}"
  ;;
esac
